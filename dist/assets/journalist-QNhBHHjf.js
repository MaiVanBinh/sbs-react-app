import{aO as i,aD as s,ag as u,R as o,u as g}from"./index-eLyz9_Ts.js";const h=i("strategy-meeting",{state:()=>({selectStrategyMeetingId:null}),getters:{},actions:{setStrategyMeetingId(t){this.selectStrategyMeetingId=t},async fetchStrategyMeetings(t){const e=s();try{return await e.strategyMeeting.basic.findAll(t)}catch(r){console.log("store: fetchStrategyMeetings api error",r)}},async fetchStrategyMeeting(t){const e=s();try{return await e.strategyMeeting.basic.findOne(t)}catch(r){console.error("store: fetchStrategyMeeting api error",r)}},async createStrategyMeeting(t){const e=s();try{return await e.strategyMeeting.basic.create(t)}catch(r){console.error("store: createStrategyMeeting api error",r)}},async updateStrategyMeeting(t){const e=s();try{return await e.strategyMeeting.basic.update(t)}catch(r){console.error("store: updateStrategyMeeting api error",r)}},async deleteStrategyMeeting(t){const e=s();try{return await e.strategyMeeting.basic.delete(t)}catch(r){console.error("store: deleteStrategyMeeting api error",r)}}}}),w=i("strategy-planning",{state:()=>({mode:"detail",infoData:{},rowData:[],params:{},newRow:{typ:"",ord:1,no:"",titl:"",inputr:"",plat:"",frm:"",releaseTime:"",rmk:""},iconVisibility:{0:!1,8:!1,normal:!1}}),persist:{pick:["mode"]},actions:{setStrategyMeetingInfoData(t){this.infoData=t},setStrategyMeetingData(t){this.rowData=t},async createRow(t,e){const r=s();try{if(!t)throw new Error("ID not found in the store");const a={...e},n=await r.strategyMeeting.element.create(t,a);if(n.success)return this.rowData.push(n.data),n}catch(a){console.error("store: submitRow api error",a)}},async updateRow(t,e,r){try{if(!t)throw new Error("ID not found in the store");return await s().strategyMeeting.element.update(t,e,r)}catch(a){console.error("store: updateRow api error",a)}},async removeRow(t,e){try{if(!t)throw new Error("ID not found in the store");return await s().strategyMeeting.element.delete(t,e)}catch(r){console.error("store: removeRow api error",r)}},async moveRow(t,e,r){try{if(!t)throw new Error("ID not found in the store");return await s().strategyMeeting.element.move(t,e,r)}catch(a){console.error("store: moveRow api error",a)}},async setInfoElements(t){const e=h(),{fetchStrategyMeeting:r}=e;try{const a=await r(t);if(a){const m=a.data.strategyMeetingElements.filter(c=>!c.typ).length;u.set(a.data,"elementCount",m);const l=u.omit(a.data,["strategyMeetingElements"]);l&&this.setStrategyMeetingInfoData(l);const p=a.data.strategyMeetingElements.sort((c,y)=>c.ord-y.ord);p&&this.setStrategyMeetingData(p)}}catch(a){console.error("stroe: fetchStrategyMeeting api error",a)}},updateInput(t,e){t==="plat"?this.params[t]?this.params[t]=`${this.params[t]},${e}`:this.params[t]=`${e}`:this.params[t]=e},togglePlat(t,e){const r=this.rowData[t];r.plat||(r.plat="");const a=r.plat.split(",");a.includes(e)?r.plat=a.filter(n=>n!==e).join(","):r.plat=`${r.plat?`${r.plat},`:""}${e} `,e in this.iconVisibility||(this.iconVisibility[e]=!1),this.iconVisibility[e]=!this.iconVisibility[e]},refreshRowData(){this.rowData=[...this.rowData]}}}),L=i("plan",{state:()=>({planId:null}),getters:{},actions:{setPlanId(t){this.planId=t},async fetchPlans(t){try{return await s().plan.basic.findAll(t)}catch(e){console.error("store: fetchPlans api error",e)}},async fetchPlan(t){try{return await s().plan.basic.findOne(t)}catch(e){console.error("store: fetchPlan api error",e)}},async fetchPlanRequest(t){try{return(await s().plan.basic.findRequest(t)).data}catch(e){console.error("store: fetchPlanRequest api error",e)}},async createPlan(t){try{return await s().plan.basic.create(t)}catch(e){console.error("store: createPlan api error",e)}},async updatePlan(t,e){try{const r=s(),a={...t,id:e};return delete a.brdcPgmId,await r.plan.basic.update(a)}catch(r){console.error("store: updatePlan api error",r)}},async deletePlan(t){try{return await s().plan.basic.delete(t)}catch(e){console.error("store: deletePlan api error",e)}},async restorePlan(t){try{return await s().plan.basic.restore(t)}catch(e){console.error("store: restorePlan api error",e)}},async toggleLock(t,e){try{const r=s();return e==="Y"?await r.plan.basic.unlock(t):await r.plan.basic.lock(t)}catch(r){console.error("store: toggleLock api error",r)}}}}),f={mac:{[o.Plan]:{create:["ctrl","n"],edit:["meta","e"],personal:["meta","j"],print:["meta","p"],post:["meta","o"],close:["meta","f4"]},[o.PlanCreate]:{save:["meta","s"],close:["meta","f4"]},[o.PlanEdit]:{save:["ctrl","s"],close:["meta","f4"],print:["meta","p"]},[o.Article]:{rightScroll:["arrowright"],leftScroll:["arrowleft"]},[o.StrategyPlanningEdit]:{articleView:["ctrl","c"],articleSearch:["ctrl","w"],newSave:["ctrl","meta","s"],planningInfoModal:["ctrl","i"],close:["meta","f4"],lineInsert:["meta","i"],lineAdd:["meta","a"],lineRemove:["meta","d"],copy:["meta","c"],paste:["meta","v"]}},win:{[o.Plan]:{create:["ctrl","n"],edit:["ctrl","e"],personal:["ctrl","j"],print:["ctrl","p"],post:["ctrl","o"],close:["ctrl","f4"]},[o.PlanCreate]:{save:["ctrl","s"],close:["ctrl","f4"]},[o.PlanEdit]:{save:["ctrl","s"],close:["ctrl","f4"],print:["ctrl","p"]},articleView:{rightScroll:["arrowright"],leftScroll:["arrowleft"]},strategyPlanningEditView:{articleView:["alt","c"],articleSearch:["ctrl","w"],newSave:["ctrl","alt","s"],planningInfoModal:["ctrl","i"],close:["ctrl","f4"]},strategyPlanningElements:{lineInsert:["alt","i"],lineAdd:["alt","a"],lineRemove:["alt","d"],copy:["ctrl","c"],paste:["ctrl","v"]}}},S=i("shortkey",{state:()=>({currentPlatform:"",currentScreen:""}),getters:{currentShortkeys:t=>{const e=f[t.currentPlatform];if(!e)return{};const r=e[t.currentScreen];return r||{}}},actions:{setShortKey(){const t=navigator.userAgent.toLowerCase(),{name:e}=g();t.includes("mac os")?this.currentPlatform="mac":t.includes("win")&&(this.currentPlatform="win"),this.currentScreen=String(e),console.log("Current Platform:",this.currentPlatform),console.log("Current Screen:",this.currentScreen),console.log("Available Shortkeys:",this.currentShortkeys)}}}),P=i("personalization",{state:()=>({articlePersonalColumn:"",myArticlePersonalColumn:""}),actions:{async fetchPersonalization(t){try{const r=await s().personalization.basic.findPersonalization(t);return t==="article"?this.articlePersonalColumn=r.data.columns:this.myArticlePersonalColumn=r.data.columns,r}catch(e){console.log("store: fetchPersonalization() Error",e)}},async updatePersonalization(t,e){try{return await s().personalization.basic.updatePersonalization(t,e)}catch(r){console.log("store: updatePersonalization() Error",r)}},async savePersonalization(t){try{return await s().personalization.basic.savePersonalization(t)}catch(e){console.log("store: savePersonalization() Error",e)}}}}),A=i("journalist",{state:()=>({journalistId:null}),actions:{async fetchJournalists(t){try{return await s().journalist.basic.findAll(t)}catch(e){console.error("store: fetchJournalists api error",e)}},async fetchJournalist(t){try{return await s().journalist.basic.findOne(t)}catch(e){console.error("store: fetchJournallist api error",e)}},async createJournalist(t){try{return await s().journalist.basic.create(t)}catch(e){console.error("store: createJournalist api error",e)}},async updateJournalist(t,e){try{return await s().journalist.basic.update(t,e)}catch(r){console.error("store: updateJournalist api error",r)}},async deleteJournalist(t){try{return await s().journalist.basic.delete(t)}catch(e){console.error("store: deleteJournalist api error",e)}},async fetchJournalistHistorys(t){try{return await s().journalist.basic.findHistoryAll(t)}catch(e){console.error("store: fetchJournalistHistory api error",e)}},async lockJournalist(t){try{return await s().journalist.basic.lock(t)}catch(e){console.error("store: lockJournalist api error",e)}},async unLockJournalist(t){try{return await s().journalist.basic.unLock(t)}catch(e){console.error("store: unLockJournalist api error",e)}}}});export{S as a,h as b,w as c,P as d,A as e,L as u};
