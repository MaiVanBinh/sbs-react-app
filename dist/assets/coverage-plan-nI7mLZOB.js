import{aO as n,aD as o}from"./index-eLyz9_Ts.js";const t=n("coverage=plan",{actions:{async fetchCoveragePlans(r){try{return await o().coveragePlan.basic.findAll(r)}catch(e){console.error("store: fetchCoveragePlans Error ",e)}},async fetchCoveragePlan(r){try{return await o().coveragePlan.basic.findOne(r)}catch(e){console.error("store: fetchCoveragePlan Error ",e)}},async createCoveragePlan(r){try{return await o().coveragePlan.basic.create(r)}catch(e){console.error("store: createCoveragePlan Error ",e)}},async updateCoveragePlan(r,e){try{return await o().coveragePlan.basic.update(r,e)}catch(a){console.error("store: updateCoveragePlan Error ",a)}},async deleteCoveragePlan(r){try{return await o().coveragePlan.basic.delete(r)}catch(e){console.error("store: deleteCoveragePlan Error ",e)}},async copyCoveragePlan(r){try{return await o().coveragePlan.basic.copy(r)}catch(e){console.error("store: copyCoveragePlan Error ",e)}},async assignCoveragePlan(r,e){try{return await o().coveragePlan.basic.assign(r,e)}catch(a){console.error("store: assignCoveragePlan Error ",a)}},async confirmCoveragePlan(r,e){try{return await o().coveragePlan.basic.confirm(r,e)}catch(a){console.error("store: confirmCoveragePlan Error ",a)}},async fetchCoverageWorkflow(r){try{return await o().coveragePlan.basic.findWorkflow(r)}catch(e){console.error("store: fetchCoveragePlan Error ",e)}}}});export{t as u};
