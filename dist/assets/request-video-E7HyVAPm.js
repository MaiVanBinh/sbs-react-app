import{aO as n,aD as t}from"./index-eLyz9_Ts.js";const c=n("request-video-list",{state:()=>({requestVideoId:null,requestVideoList:Array}),getters:{getRequestVideoList:s=>s.requestVideoList},actions:{async fetchRequestVideoList(s){try{const r=await t().request.video.findAll(s);return this.requestVideoList=r.data,r}catch(e){throw console.error("error",e),new Error(`Failed fetch request video list: ${e}`)}},async fetchRequestVideo(s){try{return await t().request.video.findOne(s)}catch(e){console.error(e)}},async createRequestVideo(s){try{return await t().request.video.create(s)}catch(e){console.error(e)}},async updateRequestVideo(s,e){try{return await t().request.video.update(s,e)}catch(r){console.error(r)}},async assignRequestVideo(s,e){try{return await t().request.video.assign(s,e)}catch(r){console.error(r)}},async deleteRequestVideo(s){try{return await t().request.video.delete(s)}catch(e){console.error(e)}},async startRequestVideo(s){try{return await t().request.video.startRequest(s)}catch(e){console.error(e)}},async cancelRequestVideo(s){try{return await t().request.video.cancelRequest(s)}catch(e){console.error(e)}},async changeRequestVideoDeadLine(s,e){try{return await t().request.video.changeDeadLine(s,e)}catch(r){console.error(r)}},async reviewRequestVideo(s,e){try{return await t().request.video.reviewRequest(s,e)}catch(r){console.error(r)}},async completeRequestVideo(s,e){try{return await t().request.video.completeRequest(s,e)}catch(r){console.error(r)}},async forceCompleteRequestVideo(s){try{return await t().request.video.forceCompleteRequest(s)}catch(e){console.error(e)}},async confirmMediaRequestVideo(s,e,r){try{return await t().request.video.confirmMediaRequest(s,e,r)}catch(o){console.error(o)}},async deleteMediaRequestVideo(s,e){try{return await t().request.video.deleteMediaRequest(s,e)}catch(r){console.error(r)}},async deleteRequestVideoFile(s,e){try{return await t().request.video.deleteRequestFile(s,e)}catch(r){console.error(r)}}}});export{c as u};
